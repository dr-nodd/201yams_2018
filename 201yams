#!/usr/bin/python3

from math import factorial
import sys
import argparse
import re


def expected_combination(c):
    a = re.compile('pair_[0-6]')
    b = re.compile('three_[0-6]')
    d = re.compile('four_[0-6]')
    e = re.compile('full_[0-6]_[0-6]')
    f = re.compile('straight_[5-6]')
    g = re.compile('yams_[0-6]')
    m = a.match(c)
    n = b.match(c)
    o = d.match(c)
    p = e.match(c)
    q = f.match(c)
    r = g.match(c)
    if not(m or n or o or p or q or r):
        raise argparse.ArgumentTypeError("%r is not a possible combination"%(c,))
    elif p and c[5] == c[7]:
        raise argparse.ArgumentTypeError("%r is not a possible combination"%(c,))
    return c


if len(sys.argv) == 7:
    parser = argparse.ArgumentParser(description='201yams')
    parser.add_argument('d1', type=int, choices={0, 1, 2, 3, 4, 5, 6})
    parser.add_argument('d2', type=int, choices={0, 1, 2, 3, 4, 5, 6})
    parser.add_argument('d3', type=int, choices={0, 1, 2, 3, 4, 5, 6})
    parser.add_argument('d4', type=int, choices={0, 1, 2, 3, 4, 5, 6})
    parser.add_argument('d5', type=int, choices={0, 1, 2, 3, 4, 5, 6})
    parser.add_argument('c', type=expected_combination)

tab = []
combi = []

try:
    args = parser.parse_args()
except:
    exit(84)


def create_combi(i, m, m2):
    j = 0
    m = int(m)
    m2 = int(m2)
    while j < i:
        combi.append(m)
        j += 1
    if m2 != 0:
        combi.append(m2)
        combi.append(m2)
    combi.sort()


def create_straight(m):
    m = int(m)
    if m == 5:
        j = 1
        while j < m + 1:
            combi.append(j)
            j += 1
    elif m == 6:
        j = 2
        while j < m + 1:
            combi.append(j)
            j += 1


def transform_combi(args):
    a = re.compile('([a-z]+)_(\\d)_?(\\d)?')
    m = a.match(args.c)
    if m[1] == "pair":
        create_combi(2, m[2], 0)
    if m[1] == "three":
        create_combi(3, m[2], 0)
    if m[1] == "four":
        create_combi(4, m[2], 0)
    if m[1] == "yams":
        create_combi(5, m[2], 0)
    if m[1] == "full":
        create_combi(3, m[2], m[3])
    if m[1] == "straight":
        create_straight(m[2])


def detect_combi(args):
    tab.append(args.d1)
    tab.append(args.d2)
    tab.append(args.d3)
    tab.append(args.d4)
    tab.append(args.d5)
    tab.sort()


def array_inside(ar1, ar2):
    i = 0
    j = 0
    while i < len(ar2):
        if len(ar1) == j:
            break
        if ar1[j] == ar2[i]:
            ar1.pop(j)
            ar2.pop(i)
            i = -1
        i += 1
        if i >= len(ar2) and j < len(ar1):
            j += 1
            i = 0
    if len(ar1) == 0:
        return True
    else:
        return ar1, ar2


def factor_proba(n, k):
    return factorial(n) / (factorial(k) * factorial(n - k))


def calc_straight(ar1):
    res = 1
    x = len(ar1)
    while x > 0:
        res *= x / 6
        x -= 1
    return res


def find_occurence(ar1):
    i = 0
    incr = 0
    while i < len(ar1):
        if ar1[i] == ar1[0]:
            incr += 1
        i += 1
    return incr


def calc_full(ar1):
    return factor_proba(len(ar1), find_occurence(ar1)) / (6 ** len(ar1))


def calc_proba(ar1, ar2):
    a = re.compile('([a-z]+)_(\\d)_?(\\d)?')
    m = a.match(args.c)
    res = 0
    if len(ar1) == 0:
        return 100
    if ar1[0] == ar1[len(ar1) - 1]:
        n = len(ar2)
        k = len(ar1)
        while k <= n:
            res += (factor_proba(n, k) * (1 / 6) ** k) * ((1 - (1 / 6)) ** (n - k))
            k += 1
    elif m[1] == "straight":
        res = calc_straight(ar1)
    else:
        res = calc_full(ar1)

    res *= 100
    return res


def print_proba(res):
    a = re.compile('([a-z]+)_(\\d)_?(\\d)?')
    m = a.match(args.c)
    str  = m[1]
    if m[1] == "three" or m[1] == "four":
        str += "-of-a-kind"

    if m[3] == None:
        print("chances to get a {:s} {:s}:\t{:.2f}%".format(m[2], str, res))
    else:
        print("chances to get a {:s} {:s} of {:s}:\t{:.2f}%".format(m[2], str, m[3], res))


transform_combi(args)
detect_combi(args)
array_inside(combi, tab)
res = calc_proba(combi, tab)
print_proba(res)
